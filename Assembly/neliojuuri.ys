# TODO: bitshift toimii, mutta jää pyörimään kun maski ylittää luvun
# Test Code should return %rcx = 48
.pos 0
                            # res = %r10
    irmovq $1, %r11         # bit = %r11 = 1
    irmovq $2345, %r12      # num = %r12

main:
    irmovq pino, %rsp       # stack pointer
    irmovq pino, %rbp       # stack start
    irmovq $1, %r8          # constant 1
#    call neliojuuri
    rrmovq %r12, %r14
    call rightshift2
    halt

.pos 0x100
neliojuuri:                 # %rcx = sqrt(%r12)
loop1:                      # while(bit < num) bit += bit;
    
    addq %r11, %r11         # bit += bit
    # Loop checking
    rrmovq %r12, %r13       # copy num to %r13
    subq %r11, %r13
    jg loop1
loop2:                      # while(bit != 0)

    # TODO: 
    # Loop checking
    rrmovq %r11, %r13       # copy bit to %r13
    irmovq $0, %r13
    addq %r13, %r13
    jne loop2
    ret

.pos 0x200
rightshift:                 # %rax = %r14 >> 1
irmovq $0x2, %rbx           # inputmask = %rbx = 0010
irmovq $0x1, %rcx           # outputmask = %rcx = 0001
irmovq $0xfffe,  %rax
andq %rax, %r14              # zero out lowest bit
jmp shiftloop
rightshift2:                # %rax = %r14 >> 2
irmovq $0x4, %rbx           # inputmask = %rbx = 0100
irmovq $0x1, %rcx           # outputmask = %rcx = 0001
irmovq $0xfffc,  %rax
andq %rax, %r14             # zero out 2 lowest bits
jmp shiftloop
increment_masks:
    addq %rbx, %rbx         # inputmask += inputmask
    addq %rcx, %rcx         # outputmask += outputmask
shiftloop:                  # while(remaining != 0)
    rrmovq %r14, %rax       # var = input
    andq %rbx, %rax         # var &= inputmask
    je increment_masks      # if(var == false) jump to increment_masks
    # read bit was 1, save it to output
    addq %rcx, %rdx         # output += outputmask
    rrmovq %r14, %rax       # remaining = input
    subq %rdx, %rax         # remaining -= output
    # Loop checking
    andq %rax, %rax
    jne increment_masks
    rrmovq %rdx, %rax
    ret

.pos 0x400
pino:                       # stack address  
    ret

.pos 0x400
pino:                       # stack address  
